package csen1002.tests.task10;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task10.Task10Lexer;
import csen1002.main.task10.Task10Parser;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task10TestsBatch7 {
	
	/**
     * Parses a provided string using Task 10's grammar
     * and gets the value of the attribute "val" of the variable "s"
     *
     * @param input a string to parse
     * @return the value of the attribute "val" of the variable "s"
     */
    public static int sValValue(String input) {
        Task10Lexer lexer = new Task10Lexer(CharStreams.fromString(input));
        Task10Parser parser = new Task10Parser(new CommonTokenStream(lexer));
        return parser.s().val;
    }


	@Test
	public void testString1() {
		assertEquals(9, 
        sValValue("550,8582,9093,8937,388,5854,3926,1400,1400,1400,1400,359,1856,6928,5013,7448,469,2762,4037,7466,7466,7466,7466,4616,434,5691,8836,8503,8503,8503,761,8321,3656,7606,13,5308,5812,9891,4126,4132,3783,4317,1688,3943,7153,178,9987,6073,1390,7486,7486,5026,1348,1348,1348,6414,6443,1348,3238,7637,5776,3718,1135,6388,7085,7368,2721,7719,1019,1373,6338,8818,3550,6727,6615,9092,7219,9214,7974,4137,95,6707,7727,5648,8131,1836,4442,4897,4897,7699,5843,6289,679,6797,2975,8292,5045,3717,6998,6998,6998,6998,625,325,8485,5411,7767,8498,4258,9288,3612,8671,9523,1918,4442,9453,9453,9453,5605,9220,4741,8984,3495,2235,1578,2070,1063,4466,2727,2370,2072,3322,8284,6332,2605,3444,8922,7100,9725,3991,5856,4134,2249,3704,2924,6574,3288,7730,7730,7730,7730,1133,2843,916,5921,3927,6556"));
	}

	@Test
	public void testString2() {
		assertEquals(2, 
        sValValue("322,6643,3815,1555,5124,7547,7547,7053,5243,2496,6326,2044,7934,3469,3469,3469,3469,6020,8364,9389,2734,293,220,4395,8875,4820,1946,4562,8965,3329,9350,5356,3913,7125,9486,2363,2787,8801,1867,4959"));
	}

	@Test
	public void testString3() {
		assertEquals(8, 
        sValValue("3069,3331,6965,5588,7570,9292,1952,3674,9829,3714,6046,9804,6692,2227,2315,6463,6463,6463,8499,8506,592,1455,4678,5171,5171,3496,8925,36,2920,633,9810,8651,1367,5337,7958,7958,7958,7958,8999,867,5222,1660,103,6040,3595,8999,5068,7862,6416,4941,4941,5031,9151,7353,7353,7353,7353,307,8801,8801,8801,9705,3943,2556,7888,4343,7242,9972,968,6560,8648,1303,7447,8665,8665,8237,2723,207,3590,6435,1769,1769,1769,1769,5724,3722,8197,8467,8367,3421,1210,9756,5532"));
	}

	@Test
	public void testString4() {
		assertEquals(1, 
        sValValue("8299,3073,1810,390,8710,7561,5356,4704,9129,9447,4951,6522,8785,8785,8785,8785,6554,3988,4966,1228,8773,3393,2147,6446,4688,7227,1520,3384,7983,9942,3184,7319,3561,1355,6872,9451,9296,10000,1967,360,6612,3785,4233,8733,2123,7119,6957,7651,9190,8788,3442"));
	}

	@Test
	public void testString5() {
		assertEquals(0, 
        sValValue("9827,1798,4567,7905,3878,7469,1091,8418,3270,7059,7301,7323,8974,5956,2346,4129,8492,1712,7668,4697,1638,5521,2089,6749,1921,124,2538,9582,7645,704,1736,2221,5073,2648,1274,6764,4525,238,951,3983,9092,3323,2995,6409,4851,4783,2827,32,858,236,6413,9549,7047,2826,7925,3639,8188,172,421,6136,2496,7601,6578,6176,4179,1635,6096,5391,244,368,1379,3047,3216,2856,3272,680,3081,7921,4262,6185,3707,3884,7358,3634,1306,4660,5092,9103,5060,4356,4555,4745,2937,2088,1182,2970,8961,1055,6148,168,1682,1085,9640,4687,7480,1861,5022,6941,6442,4801,6978,447,3048,5183,78,1375,8649,1762,2530,2880"));
	}

	@Test
	public void testString6() {
		assertEquals(5, 
        sValValue("3531,3531,3077,4263,4263,4263,4263,6003,4869,1201,5991,5991,729,6211,6211,6211,6211,2071,2071,9838"));
	}

	@Test
	public void testString7() {
		assertEquals(5, 
        sValValue("5784,312,6236,2940,3674,1283,9650,8236,3185,3185,6793,9858,6059,297,7060,5013,7785,852,8193,757,199,5202,7019,9900,5907,5907,5907,5907,3226,1737,898,6557,5701,2684,2684,2318,2603,4075,4075,3761,3761,9257,5281"));
	}

	@Test
	public void testString8() {
		assertEquals(6, 
        sValValue("791,4432,582,5673,5151,2879,5703,4413,8440,7531,8648,5240,1536,1536,1536,2476,365,7803,2190,2084,613,3476,9267,6434,7705,6202,3029,550,8794,6465,8391,4378,7358,535,4157,7104,8193,76,2505,1152,1152,2557,3290,8976,9729,7477,2526,9472,3900,8186,2890,1028,8790,4837,4837,4837,4837,2781,46,9681,2401,5333,6441,1231,1231,2590,2753,5799,870,2392,3172,4348,5441,8628,4316,1618,7231,8978,339,7076,3547,1332,2219,6087,1698,8857,2108,5963,5963,4156,2553,6817,6817,6817,6817,6448,4078,8755,8073,893,4786,5537,437,9443,4073,9467,3992,4755,9184,1624,8098,1890"));
	}

	@Test
	public void testString9() {
		assertEquals(23, 
        sValValue("4011,4011,7851,7851,4969,9351,9351,9351,2845,9504,3185,3185,3185,2366,2835,1321,5831,5831,2367,1450,9003,9003,3091,1325,3024,3024,3024,3024,5423,5423,5423,5423,6107,4200,4200,907,907,907,9209,7250,6643,5288,5694,5694,5694,1932,5299,5299,5299,5299,7762,1824,1824,1824,1824,9437,9437,8104,8104,8027,574,177,177,177,9758,2786,6845,8617,5700,6870,8925,8925,7048,7048,4213,1000,6031,6031,1563,2466,2466,2466,5699,2859,625,8863,5676,5676,5676,5676,6046,7757,7757,1803,9564,9564,9564,9564,876,2645,7587,6205"));
	}

	@Test
	public void testString10() {
		assertEquals(7, 
        sValValue("3835,7158,7900,1686,1686,1686,1128,8229,2803,6920,5702,7257,9800,2198,977,6211,3074,7490,1076,2207,3253,604,604,7327,9862,4599,7933,9941,3146,854,7534,7287,6543,1301,931,6412,2850,2048,4253,4097,6760,4145,2589,3084,60,7332,7193,918,7186,5148,8240,296,1559,4336,9009,1076,404,376,8591,3145,3344,2710,6689,6290,7945,7757,5885,7837,7123,7123,7123,7123,3631,5175,3893,1401,3883,3000,706,361,5492,256,3335,7847,2784,1433,3857,944,4185,5825,4880,602,8295,6143,211,285,6698,5046,7503,5814,1161,5257,3957,6022,3564,8826,5798,8861,7961,3707,7147,435,5465,1365,4175,5051,4352,7348,5971,2831,9687,7925,4432,7701,9109,9768,1661,2616,3943,6396,4850,812,4748,4748,7750,4646,6407,5444,1511,7622,6782,1482,6077,7039,9013,9460,5899,2990,5196,4800,6431,4145,5252,8054,2771,1389,1466,7364,893,6763,2218,6359,6521,6521,6521,6521,3799,3799,3799,5263,1968,1965,675,7908,2972,8295,5588,6239,2990,1746,1875,6921,2121,1765,6936,912,8254,2606,665,665,665,665,3466"));
	}

}