package csen1002.tests.task10;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task10.Task10Lexer;
import csen1002.main.task10.Task10Parser;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task10TestsBatch1 {
	
	/**
     * Parses a provided string using Task 10's grammar
     * and gets the value of the attribute "val" of the variable "s"
     *
     * @param input a string to parse
     * @return the value of the attribute "val" of the variable "s"
     */
    public static int sValValue(String input) {
        Task10Lexer lexer = new Task10Lexer(CharStreams.fromString(input));
        Task10Parser parser = new Task10Parser(new CommonTokenStream(lexer));
        return parser.s().val;
    }


	@Test
	public void testString1() {
		assertEquals(1, 
        sValValue("7933,3129,6181,6073,5431,6781,707,28,5502,171,4087,6507,4835,4338,6086,474,354,3818,1929,8176,8176,2365,5481,1609,6020,919,1875,2212,1942,773,9209,5921,2537,6859,1223,90,4150,985,3022,2058,1855,3926,8603,9758,9433,7894,8109,742,7433,6783,3343,9667,5652,7527,9571,2842,4775,9677,1363,9883,5579,1881,362,6745,3099,3303,3224,1419,5550,7475,5263,8743,3483,2798,3351,4124,1303,224,3100,1787,6212,1852,2952,9666,1247,7435,6687,9974,3151,6848,3735,3666,256,7429,9879,410,5580,6791,2747,6799,4040,8527,6160,8723,4998,340"));
	}

	@Test
	public void testString2() {
		assertEquals(19, 
        sValValue("4812,599,599,537,2622,6957,8251,2538,8980,8980,8980,8980,8639,2203,7563,9151,5593,3139,3139,2152,2152,2152,2166,4403,4403,4403,4403,4412,6718,7672,1901,9181,9181,9181,6250,3314,3540,1608,6318,829,8707,9615,9615,9615,2781,6701,7807,6091,1330,6917,609,3401,2818,2667,2667,5382,363,1428,3608,538,6635,6635,6842,6842,6842,3489,3010,8395,3946,3595,6744,4274,4274,4274,4274,3487,3487,3487,3487,6329,8999,9530,4482,4482,8675,3664,3745,6639,6639,5608,3202,6830,1547,1547,1547,1547,8903,199,5066,3923,6489,7481,104,9089,9089,3028,6008,6008,6967,2213,729,501,5234,409,5135,5135,5135,9273,6529,1087,4667,4667,4667,3238,9087"));
	}

	@Test
	public void testString3() {
		assertEquals(6, 
        sValValue("8046,5847,3670,4537,3230,6840,9581,1804,6933,6933,6933,3003,7637,9145,7120,6108,9823,2973,2984,1426,914,4301,7743,9682,9906,1708,3787,2072,5656,2206,4520,4520,4520,6433,820,3437,5359,6575,7471,3058,81,4628,8309,5300,2740,2740,2740,2247,2247,4470,8078,2733,9972,9972,2117,5654,44,9625,24,976,7042,1631,8805,8958,5428,4065,6614,9517,5245,9340,2951,5538,6105,2614,2614,2614,2614,6307,2041,7016,680,669,3222,2403,222,2683,8003,9958,8276,4499,5805,7228,1711,7239,545,8629,1702,5506,5330,5782,9117,1673,709,2641,5850,4844,487,7580,6129,9671,7923,7622,9498,8363,4286,5746,302,5173,1212,841,6814,6403,8085,1289,6873,521,5738,7355"));
	}

	@Test
	public void testString4() {
		assertEquals(11, 
        sValValue("8487,5822,4954,1759,8710,5226,6478,5327,3650,5347,5347,5347,5347,1644,5257,332,5902,5233,4121,9938,2971,5564,6173,1755,6375,2965,2965,2965,2965,8258,9536,6450,4859,8713,6834,2006,3451,5142,8986,5775,7525,8109,3740,9775,4828,1602,1577,1577,1577,1919,1919,3946,7797,6493,3182,8942,7875,9557,4012,5318,4103,6099,2244,7587,6419,4556,4556,5347,2983,2983,2983,1194,1134,41,6178,6178,6178,6178,1060,7060,3049,8998,3788,1346,636,5969,2599,7669,7669,7669,7669,3080,3080,3080,3080,1172,4386,98,4948,6753,4920,5338,7625,2568,4138,1728,1378,3729,1824,9479,4700,6714,1898,306,2938,8626,5714,1413,3666,3570,9152,1927,5296,2861,7509,6024,7227,1304,2858,4747,5768,5930,3781,7852,3628,1838,983,983,5843,3527,4197,2219,3457,1310,1310,1310,1310,76"));
	}

	@Test
	public void testString5() {
		assertEquals(14, 
        sValValue("5807,8115,5305,2708,6528,761,1751,1751,1751,1751,6643,1924,9860,4572,7209,7813,538,6070,1432,2137,2137,2137,2137,8201,8201,2684,9799,9799,6207,6207,6207,32,7518,1185,5968,4016,7955,7553,4756,4756,4756,9803,7809,6938,7674,3499,8843,6402,6992,6543,6569,4747,4747,4747,1477,7481,425,1854,9438,2910,2910,2910,2910,4293,4293,7970,8012,9894,7052,3551,1452,1452,5481,2928,479,4145,7255,5856,1643,8655,6663,8653,5110,7045,599,877,1483,7807,9429,8434,8434,9623,6160,1586,1079,5198,8796,2706,3640,1350,6472,6472,6472,4511,2677,4074,5540,2726,9892,4551,2635,6150,83,4353,6854,1758,2846,9592,9724,7917,5392,6704,7203,7203,7203,5351,6858,6806,4109,8198,6742,6742,6742,3162,7758,3219,7412,73,9668,2817,9546,8333,675,5342,6989,7977,5287"));
	}

	@Test
	public void testString6() {
		assertEquals(14, 
        sValValue("1971,3152,675,675,675,675,3471,5928,9471,9471,5855,5855,5855,5855,5897,5897,5897,5897,8527,7889,7889,7889,7889,6200,6615,1142,1329,3944,6342,9256,6942,9103,5381,1964,1964,5861,5861,5861,5861,3256,1399,213,1283,7017,7017,7017,8557,4315,227,1865,1865,4916,4916,4916,1043,3864,2635,4482,4482,8439,8439,8439,1359,6458,6458,4013,4013,4991"));
	}

	@Test
	public void testString7() {
		assertEquals(27, 
        sValValue("6029,6029,6029,6029,8054,8054,8054,9710,210,7033,7033,7033,7033,7561,3636,3636,9685,8422,8422,8422,4587,4587,4587,4578,5721,1222,1222,1222,1222,4853,6698,6698,6698,3959,5030,4574,202,1062,99,8546,8546,9218,1854,282,7277,5921,2789,3062,7199,1288,7697,5416,6314,6314,3122,3122,7666,8781,8781,8781,1934,8345,162,4479,1023,5245,6807,4116,706,801,9511,2660,613,3139,4417,4704,2376,4610,8514,8514,8514,8514,7974,6467,1923,8215,8215,5,4959,485,485,485,485,4649,4649,5011,775,775,6649,1147,8758,8340,9278,6576,3486,8403,6761,6761,6761,6761,7350,5260,4436,1681,5881,6657,7594,9569,8188,1805,8952,3658,3658,7084,7084,7084,3757,9868,3073,3073,9884,7096,8874,8074,1196,1491,6571,9823,1087,4503,6747,4935,6581,8547,1565,9112,9112,4705,4705,8819,3647,6363,6815,6815,6815,6815,9868,9868,9868,1431,7755,2263,5871,3289,7236,451,1735,2799,2654,9795,7544,8075,9992,7084,7927,5842,7141,4189,4647,4726,4726,4726,2808,5744,5776,3857,6878,3162,4974,4974,3627,3313"));
	}

	@Test
	public void testString8() {
		assertEquals(37, 
        sValValue("9082,9228,9228,9228,9228,1211,8833,3912,9351,8917,8917,2435,2096,2096,2096,7293,5726,8500,8500,711,1297,6576,2791,7373,3734,6131,886,5491,6894,6894,6894,9362,1006,1006,1006,620,620,4722,4722,4722,7825,9824,6765,6003,1050,1050,1050,1050,143,2973,5951,9211,802,802,9079,7137,6526,6487,7292,5110,6726,6726,4041,9691,8504,8504,8504,862,5243,3114,2548,431,431,431,431,692,2997,213,5130,6867,2771,8341,922,7423,6506,6506,6506,4475,4430,4850,4326,4326,6014,7225,4161,4842,4842,4842,7341,1763,4776,6254,6254,6254,6254,1873,1237,7957,3059,3059,3059,3832,3832,3832,3832,1863,1863,1863,3372,2397,7509,7509,7509,444,1762,6246,1973,1973,1973,5630,9868,9868,9868,323,2837,6981,5922,5240,5240,5240,3959,8008,3448,1652,358,2914,7027,1962,1962,1962,1962,7425,7800,8558,7377,8174,8698,3702,2620,4629,4629,9710,9605,5380,1021,1021,5814,5814,3891,3741,2834,2834,1,1,1466,2292,7916,478,296,5130,3642,7081,2023,6384,6849,4130,184,184,184,184,1272,9558,3519,6285,6285,6285,6285,1088,1776,3322,6069,6069,6069,4347,4347,4347,4347,2367,7078,4397,9236,5952,1544,1544,1544,9650,9606,2562,4014,6990,845,372,372,372,372,4265,8498,6833,4005,7055,6249,6452,5173,5947,6327,9700,2555,2308,3793,3793,3793,2935,6073,5832,5502,3914"));
	}

	@Test
	public void testString9() {
		assertEquals(3, 
        sValValue("1402,1402,1402,1402,4661,2736,3512,6670,9315,3287,4132,8014,1455,1165,1564,7963,7083,9917,6305,3636,5381,6211,6944,1493,7433,3467,9871,1906,4190,7300,1295,2905,9552,1714,2687,869,6503,2658,2742,6914,2530,4232,8764,7915,7528,7703,8169,2839,1249,1451,3578,8184,1485,771,2999,7267,8646,70,9998,729,729,729,729,6888,7169,6386,7410,1431,9277,2415,2154,8880,2013,9245,8018,5408,4192,2215,2215,2215,2215,3877,7898,5213,5920,4255,6912,94,9686,5017,3034,8904,8678,478,2489,443,4936,7435,2971,4641,7223,9331,8971,5938,6096,5015,9968,9645,1556,9900"));
	}

	@Test
	public void testString10() {
		assertEquals(19, 
        sValValue("5609,4566,7221,1219,2594,4540,6517,6517,6517,2261,9755,9358,3830,3830,3830,3830,701,478,478,2103,7045,8470,8470,8720,1274,8209,8209,8808,61,61,4180,5856,5856,1296,5094,5094,5094,5454,7298,3606,6313,9044,9044,4776,7881,7881,8586,5423,5423,5423,6853,3513,9472,6072,5403,9622,9622,7163,2717,1553,1553,6734,5719,6947,6947,6947,6947,8713,8937,3022,3022,3022,3022,2589,9188,9188,9188,9188,3786,5867,6378,6378,6378,6378,4318,2431,4039,9907,8270,3734,8440,1767,1767,7676,9266,3973,8305,8833,3351,5110,5110,5110,1301"));
	}

}