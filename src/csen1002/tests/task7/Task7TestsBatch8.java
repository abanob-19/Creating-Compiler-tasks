package csen1002.tests.task7;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.StringJoiner;
import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.Vocabulary;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task7.Task7Lexer;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task7TestsBatch8{
	
	/**
	 * Returns a string of tokenized lexemes.
	 *
	 * @param input is the string to be tokenized.
	 * @return Returns a formatted string representation of the list of tokens. The
	 *         string representation follows the one in the task description
	 */
	public static String tokenStream(String input) {
		// In case Task7Lexer is not defined correctly:
		// 1- If you modified the grammar in the g4 file, regenerate the ANTLR
		// recognizer to make sure that the latest grammar is generated
		// 2- Make sure that the location and the package are configured properly
		Task7Lexer lexer = new Task7Lexer(CharStreams.fromString(input));
		Vocabulary vocabulary = lexer.getVocabulary();
		List<? extends Token> tokens = lexer.getAllTokens();
		StringJoiner stringJoiner = new StringJoiner(";");
		for (Token token : tokens) {
			stringJoiner.add(token.getText() + "," + vocabulary.getSymbolicName(token.getType()));
		}
		return stringJoiner.toString();
	}


	@Test
	public void testString1() {
		assertEquals("000,ONE;001,ZERO;111,ONE;000,ONE;111,ONE;011,ONE;000,ONE;111,ONE;011,ONE;111,ONE;101,ZERO;001,ZERO;011,ONE;011,ONE;001,ZERO;110,ZERO;011,ONE;010,ZERO;010,ZERO;110,ZERO;010,ZERO;110,ZERO;011,ONE;110,ZERO;011,ONE;000,ONE;011,ONE;001,ZERO;111,ONE;001,ZERO;111,ONE;000,ONE;111,ONE;001,ZERO;111,ONE;100,ZERO;001,ZERO;010,ZERO;001,ZERO;101,ZERO;100,ZERO;000,ONE;011,ONE;110,ZERO;001,ZERO;011,ONE;000,ONE;111,ONE;111,ONE;010,ZERO;110,ZERO;100,ZERO;110,ZERO;001,ZERO", 
        tokenStream("000001111000111011000111011111101001011011001110011010010110010110011110011000011001111001111000111001111100001010001101100000011110001011000111111010110100110001"));
	}

	@Test
	public void testString2() {
		assertEquals("101,ZERO;100,ZERO;100,ZERO;011,ONE;111,ONE;001,ZERO;001,ZERO;010,ZERO;001,ZERO;001,ZERO;111,ONE;111,ONE;010,ZERO;000,ONE;000,ONE;101,ZERO;000,ONE;110,ZERO;010,ZERO;100,ZERO;001,ZERO;010,ZERO;110,ZERO;001,ZERO;101,ZERO;100,ZERO;100,ZERO;110,ZERO;110,ZERO;011,ONE;111,ONE;110,ZERO;001,ZERO;001,ZERO;101,ZERO;011,ONE;111,ONE;010,ZERO;111,ONE;011,ONE;001,ZERO;000,ONE;110,ZERO;110,ZERO;010,ZERO;110,ZERO;110,ZERO;001,ZERO;101,ZERO;011,ONE;110,ZERO;100,ZERO;100,ZERO;111,ONE;010,ZERO;000,ONE;110,ZERO;101,ZERO;010,ZERO;101,ZERO;101,ZERO;101,ZERO;001,ZERO;010,ZERO;111,ONE;011,ONE;000,ONE;110,ZERO;010,ZERO;011,ONE;111,ONE;011,ONE;000,ONE;011,ONE;110,ZERO;101,ZERO;010,ZERO;101,ZERO;110,ZERO;101,ZERO;011,ONE;000,ONE;101,ZERO;010,ZERO;0,ERROR", 
        tokenStream("1011001000111110010010100010011111110100000001010001100101000010101100011011001001101100111111100010011010111110101110110010001101100101101100011010111101001001110100001101010101011011010010101110110001100100111110110000111101010101011101010110001010100"));
	}

	@Test
	public void testString3() {
		assertEquals("101,ZERO;011,ONE;010,ZERO;010,ZERO;000,ONE;110,ZERO;100,ZERO;000,ONE;101,ZERO;010,ZERO;101,ZERO;010,ZERO;001,ZERO;100,ZERO;011,ONE;100,ZERO;000,ONE;100,ZERO;110,ZERO;101,ZERO;100,ZERO;101,ZERO;000,ONE;011,ONE;111,ONE;110,ZERO;111,ONE;111,ONE;101,ZERO;000,ONE;111,ONE;010,ZERO;110,ZERO;111,ONE;100,ZERO;101,ZERO;001,ZERO;011,ONE;010,ZERO;101,ZERO;011,ONE;110,ZERO;010,ZERO;011,ONE;110,ZERO;000,ONE;000,ONE;011,ONE;000,ONE;000,ONE;100,ZERO;111,ONE;010,ZERO;011,ONE;100,ZERO;011,ONE;110,ZERO;111,ONE;101,ZERO;010,ZERO;100,ZERO;000,ONE;001,ZERO;000,ONE;111,ONE;000,ONE;100,ZERO;101,ZERO;001,ZERO;111,ONE;100,ZERO;011,ONE;101,ZERO;101,ZERO;011,ONE;001,ZERO;111,ONE;010,ZERO;000,ONE;010,ZERO;011,ONE;010,ZERO;001,ZERO;0,ERROR", 
        tokenStream("1010110100100001101000001010101010100011000111000001001101011001010000111111101111111010001110101101111001010010110101010111100100111100000000110000001001110100111000111101111010101000000010001110001001010011111000111011010110011110100000100110100010"));
	}

	@Test
	public void testString4() {
		assertEquals("110,ZERO;011,ONE;000,ONE;100,ZERO;011,ONE;000,ONE;100,ZERO;110,ZERO;010,ZERO;011,ONE;011,ONE;110,ZERO;111,ONE;110,ZERO;101,ZERO;101,ZERO;110,ZERO;000,ONE;000,ONE;101,ZERO;100,ZERO;101,ZERO;001,ZERO;010,ZERO;101,ZERO;001,ZERO;000,ONE;110,ZERO;110,ZERO;010,ZERO;111,ONE;001,ZERO;100,ZERO;000,ONE;000,ONE;011,ONE;011,ONE;011,ONE;001,ZERO;010,ZERO;011,ONE;001,ZERO;011,ONE;000,ONE;111,ONE;110,ZERO;011,ONE;010,ZERO;010,ZERO;111,ONE;100,ZERO;001,ZERO;110,ZERO;001,ZERO;011,ONE;001,ZERO;100,ZERO;001,ZERO;110,ZERO;100,ZERO;011,ONE;000,ONE;101,ZERO;001,ZERO;001,ZERO;001,ZERO;011,ONE;001,ZERO;010,ZERO;011,ONE;000,ONE;111,ONE;110,ZERO;100,ZERO;100,ZERO;111,ONE;011,ONE;101,ZERO;011,ONE;011,ONE;101,ZERO;010,ZERO;110,ZERO;011,ONE;100,ZERO;100,ZERO;100,ZERO;101,ZERO;100,ZERO;100,ZERO;101,ZERO;011,ONE;110,ZERO;110,ZERO;1,ERROR", 
        tokenStream("1100110001000110001001100100110111101111101011011100000001011001010010101010010001101100101110011000000000110110110010100110010110001111100110100101111000011100010110011000011101000110001010010010010110010100110001111101001001110111010110111010101100111001001001011001001010111101101"));
	}

	@Test
	public void testString5() {
		assertEquals("110,ZERO;110,ZERO;111,ONE;010,ZERO;100,ZERO;101,ZERO;101,ZERO;001,ZERO;100,ZERO;101,ZERO;001,ZERO;100,ZERO;101,ZERO;101,ZERO;000,ONE;100,ZERO;111,ONE;011,ONE;001,ZERO;011,ONE;011,ONE;101,ZERO;110,ZERO;011,ONE;000,ONE;101,ZERO;100,ZERO;010,ZERO;000,ONE;011,ONE;011,ONE;100,ZERO;110,ZERO;000,ONE;011,ONE;001,ZERO;111,ONE;010,ZERO;111,ONE;111,ONE;100,ZERO;100,ZERO;000,ONE;010,ZERO;100,ZERO;100,ZERO;010,ZERO;100,ZERO;001,ZERO;000,ONE;001,ZERO;101,ZERO;010,ZERO;101,ZERO;100,ZERO;011,ONE;000,ONE;0,ERROR", 
        tokenStream("1101101110101001011010011001010011001011010001001110110010110111011100110001011000100000110111001100000110011110101111111001000000101001000101000010000011010101011000110000"));
	}

	@Test
	public void testString6() {
		assertEquals("111,ONE;110,ZERO;011,ONE;010,ZERO;100,ZERO;101,ZERO;001,ZERO;000,ONE;000,ONE;110,ZERO;110,ZERO;011,ONE;011,ONE;010,ZERO;111,ONE;111,ONE;111,ONE;110,ZERO;100,ZERO;001,ZERO;101,ZERO;110,ZERO;100,ZERO;001,ZERO;010,ZERO;110,ZERO;010,ZERO;111,ONE;110,ZERO;011,ONE;001,ZERO;111,ONE;000,ONE;000,ONE;110,ZERO;000,ONE;111,ONE;101,ZERO;010,ZERO;011,ONE;01,ERROR", 
        tokenStream("11111001101010010100100000011011001101101011111111111010000110111010000101011001011111001100111100000011000011110101001101"));
	}

	@Test
	public void testString7() {
		assertEquals("001,ZERO;010,ZERO;110,ZERO;110,ZERO;111,ONE;110,ZERO;100,ZERO;111,ONE;111,ONE;011,ONE;010,ZERO;011,ONE;010,ZERO;110,ZERO;110,ZERO;100,ZERO;011,ONE;011,ONE;001,ZERO;010,ZERO;000,ONE;111,ONE;011,ONE;101,ZERO;011,ONE;001,ZERO;111,ONE;100,ZERO;011,ONE;100,ZERO;101,ZERO;010,ZERO;001,ZERO;001,ZERO;110,ZERO;0,ERROR", 
        tokenStream("0010101101101111101001111110110100110101101101000110110010100001110111010110011111000111001010100010011100"));
	}

	@Test
	public void testString8() {
		assertEquals("001,ZERO;000,ONE;010,ZERO;001,ZERO;110,ZERO;110,ZERO;101,ZERO;110,ZERO;000,ONE;011,ONE;001,ZERO;010,ZERO;000,ONE;001,ZERO;111,ONE;000,ONE;001,ZERO;011,ONE;101,ZERO;101,ZERO;001,ZERO;011,ONE;011,ONE;010,ZERO;000,ONE;101,ZERO;100,ZERO;010,ZERO;111,ONE;100,ZERO;100,ZERO;110,ZERO", 
        tokenStream("001000010001110110101110000011001010000001111000001011101101001011011010000101100010111100100110"));
	}

	@Test
	public void testString9() {
		assertEquals("010,ZERO;110,ZERO;001,ZERO;110,ZERO;100,ZERO;001,ZERO;100,ZERO;011,ONE;010,ZERO;100,ZERO;100,ZERO;000,ONE;100,ZERO;011,ONE;001,ZERO;010,ZERO;000,ONE;010,ZERO;011,ONE;101,ZERO;010,ZERO;111,ONE;110,ZERO;000,ONE;011,ONE;100,ZERO;011,ONE;101,ZERO;011,ONE;101,ZERO;010,ZERO;110,ZERO;011,ONE;010,ZERO;101,ZERO;000,ONE;011,ONE;001,ZERO;001,ZERO;100,ZERO;000,ONE;000,ONE;011,ONE;000,ONE;010,ZERO;001,ZERO;110,ZERO;000,ONE;000,ONE;010,ZERO;111,ONE;000,ONE;110,ZERO;101,ZERO;010,ZERO;011,ONE;101,ZERO;001,ZERO;110,ZERO;100,ZERO;000,ONE;111,ONE;111,ONE;100,ZERO;100,ZERO;111,ONE;100,ZERO;001,ZERO;000,ONE;110,ZERO;110,ZERO;100,ZERO;000,ONE;000,ONE;101,ZERO;011,ONE;001,ZERO;100,ZERO;110,ZERO;111,ONE;111,ONE;010,ZERO;001,ZERO;110,ZERO;110,ZERO;110,ZERO;011,ONE;101,ZERO;000,ONE;000,ONE;110,ZERO;101,ZERO;000,ONE;001,ZERO;000,ONE;110,ZERO;010,ZERO;001,ZERO;110,ZERO;001,ZERO;010,ZERO;010,ZERO;110,ZERO;001,ZERO;00,ERROR", 
        tokenStream("01011000111010000110001101010010000010001100101000001001110101011111000001110001110101110101011001101010100001100100110000000001100001000111000000001011100011010101001110100111010000011111110010011110000100011011010000000010101100110011011111101000111011011001110100000011010100000100011001000111000101001011000100"));
	}

	@Test
	public void testString10() {
		assertEquals("000,ONE;110,ZERO;001,ZERO;010,ZERO;010,ZERO;000,ONE;011,ONE;100,ZERO;011,ONE;110,ZERO;001,ZERO;101,ZERO;011,ONE;010,ZERO;111,ONE;001,ZERO;101,ZERO;011,ONE;000,ONE;111,ONE;000,ONE;110,ZERO;110,ZERO;110,ZERO;011,ONE;010,ZERO;010,ZERO;010,ZERO;100,ZERO;001,ZERO;100,ZERO;101,ZERO;111,ONE;101,ZERO;000,ONE;111,ONE;110,ZERO;100,ZERO;101,ZERO;111,ONE;001,ZERO;010,ZERO;001,ZERO;101,ZERO;010,ZERO;010,ZERO", 
        tokenStream("000110001010010000011100011110001101011010111001101011000111000110110110011010010010100001100101111101000111110100101111001010001101010010"));
	}

}