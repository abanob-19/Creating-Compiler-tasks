package csen1002.tests.task7;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.StringJoiner;
import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.Vocabulary;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task7.Task7Lexer;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task7TestsBatch3{
	
	/**
	 * Returns a string of tokenized lexemes.
	 *
	 * @param input is the string to be tokenized.
	 * @return Returns a formatted string representation of the list of tokens. The
	 *         string representation follows the one in the task description
	 */
	public static String tokenStream(String input) {
		// In case Task7Lexer is not defined correctly:
		// 1- If you modified the grammar in the g4 file, regenerate the ANTLR
		// recognizer to make sure that the latest grammar is generated
		// 2- Make sure that the location and the package are configured properly
		Task7Lexer lexer = new Task7Lexer(CharStreams.fromString(input));
		Vocabulary vocabulary = lexer.getVocabulary();
		List<? extends Token> tokens = lexer.getAllTokens();
		StringJoiner stringJoiner = new StringJoiner(";");
		for (Token token : tokens) {
			stringJoiner.add(token.getText() + "," + vocabulary.getSymbolicName(token.getType()));
		}
		return stringJoiner.toString();
	}


	@Test
	public void testString1() {
		assertEquals("100,ZERO;101,ZERO;010,ZERO;111,ONE;010,ZERO;011,ONE;101,ZERO;000,ONE;010,ZERO;001,ZERO;001,ZERO;100,ZERO;110,ZERO;011,ONE;100,ZERO;110,ZERO;011,ONE;111,ONE;000,ONE;000,ONE;100,ZERO;011,ONE;110,ZERO;110,ZERO;110,ZERO;111,ONE;111,ONE;100,ZERO;001,ZERO;101,ZERO;100,ZERO;110,ZERO;100,ZERO;111,ONE;011,ONE;100,ZERO;001,ZERO;100,ZERO;110,ZERO;101,ZERO;000,ONE;010,ZERO;111,ONE;001,ZERO;111,ONE;101,ZERO;000,ONE;101,ZERO;101,ZERO;010,ZERO;101,ZERO;011,ONE;111,ONE;111,ONE;100,ZERO;100,ZERO;011,ONE;100,ZERO;001,ZERO;011,ONE;011,ONE;110,ZERO;011,ONE;110,ZERO;010,ZERO;001,ZERO;011,ONE;110,ZERO;101,ZERO;100,ZERO;000,ONE;110,ZERO;010,ZERO;011,ONE;011,ONE;001,ZERO;000,ONE;011,ONE;010,ZERO;0,ERROR", 
        tokenStream("1001010101110100111010000100010011001100111001100111110000001000111101101101111111000011011001101001110111000011001101010000101110011111010001011010101010111111111001000111000010110111100111100100010111101011000001100100110110010000110100"));
	}

	@Test
	public void testString2() {
		assertEquals("100,ZERO;111,ONE;001,ZERO;101,ZERO;010,ZERO;000,ONE;111,ONE;110,ZERO;111,ONE;011,ONE;001,ZERO;111,ONE;100,ZERO;000,ONE;101,ZERO;100,ZERO;110,ZERO;010,ZERO;011,ONE;101,ZERO;111,ONE;101,ZERO;111,ONE;111,ONE;100,ZERO;110,ZERO;100,ZERO;010,ZERO;000,ONE;111,ONE;110,ZERO;010,ZERO;000,ONE;110,ZERO;001,ZERO;011,ONE;001,ZERO;010,ZERO;010,ZERO;000,ONE;001,ZERO;111,ONE;111,ONE;011,ONE;100,ZERO;011,ONE;111,ONE;1,ERROR", 
        tokenStream("1001110011010100001111101110110011111000001011001100100111011111011111111001101000100001111100100001100010110010100100000011111110111000111111"));
	}

	@Test
	public void testString3() {
		assertEquals("000,ONE;010,ZERO;011,ONE;111,ONE;100,ZERO;100,ZERO;100,ZERO;110,ZERO;001,ZERO;110,ZERO;100,ZERO;010,ZERO;011,ONE;000,ONE;010,ZERO;100,ZERO;100,ZERO;001,ZERO;011,ONE;110,ZERO;110,ZERO;111,ONE;010,ZERO;010,ZERO;011,ONE;000,ONE;111,ONE;101,ZERO;110,ZERO;001,ZERO;100,ZERO;000,ONE;100,ZERO;101,ZERO;111,ONE;010,ZERO;010,ZERO;010,ZERO;101,ZERO;011,ONE;001,ZERO;111,ONE;010,ZERO;011,ONE;110,ZERO;001,ZERO;001,ZERO;011,ONE;010,ZERO;011,ONE;000,ONE;110,ZERO;001,ZERO;001,ZERO;111,ONE;011,ONE;011,ONE;101,ZERO;010,ZERO;100,ZERO;011,ONE;000,ONE;010,ZERO;111,ONE;101,ZERO;000,ONE;110,ZERO;010,ZERO;110,ZERO;101,ZERO;110,ZERO;001,ZERO;011,ONE;101,ZERO;001,ZERO;110,ZERO;000,ONE;101,ZERO;110,ZERO;100,ZERO;010,ZERO;111,ONE;111,ONE;100,ZERO;101,ZERO;010,ZERO;111,ONE;001,ZERO;110,ZERO;111,ONE;011,ONE;110,ZERO;101,ZERO;010,ZERO;111,ONE;100,ZERO;111,ONE;011,ONE;110,ZERO;001,ZERO;000,ONE;111,ONE;101,ZERO;011,ONE;010,ZERO;001,ZERO;101,ZERO;101,ZERO;111,ONE;100,ZERO;100,ZERO;110,ZERO;010,ZERO;110,ZERO;111,ONE;000,ONE;110,ZERO;110,ZERO;110,ZERO;110,ZERO;011,ONE;001,ZERO;111,ONE;100,ZERO;111,ONE;010,ZERO;101,ZERO;100,ZERO;100,ZERO;101,ZERO;011,ONE;111,ONE;101,ZERO;111,ONE;001,ZERO;111,ONE;111,ONE;010,ZERO;001,ZERO;001,ZERO;110,ZERO;010,ZERO;011,ONE;010,ZERO;0,ERROR", 
        tokenStream("0000100111111001001001100011101000100110000101001000010111101101110100100110001111011100011000001001011110100100101010110011110100111100010010110100110001100010011110110111010101000110000101111010001100101101011100010111010011100001011101000101111111001010101110011101110111101010101111001110111100010001111010110100011011011111001001100101101110001101101101100110011111001110101011001001010111111011110011111110100010011100100110100"));
	}

	@Test
	public void testString4() {
		assertEquals("111,ONE;101,ZERO;010,ZERO;010,ZERO;111,ONE;100,ZERO;001,ZERO;010,ZERO;001,ZERO;010,ZERO;101,ZERO;011,ONE;110,ZERO;001,ZERO;111,ONE;000,ONE;001,ZERO;001,ZERO;001,ZERO;110,ZERO;110,ZERO;001,ZERO;001,ZERO;100,ZERO;111,ONE;111,ONE;010,ZERO;011,ONE;101,ZERO;010,ZERO;010,ZERO;101,ZERO;001,ZERO;011,ONE;001,ZERO;101,ZERO;011,ONE;100,ZERO;000,ONE;100,ZERO;110,ZERO;000,ONE;100,ZERO;000,ONE;001,ZERO;111,ONE;111,ONE;101,ZERO;111,ONE;101,ZERO;110,ZERO;100,ZERO;101,ZERO;000,ONE;010,ZERO;100,ZERO;111,ONE;010,ZERO;000,ONE;000,ONE;000,ONE;111,ONE;011,ONE;100,ZERO;111,ONE;100,ZERO;001,ZERO;011,ONE;110,ZERO;101,ZERO;010,ZERO;000,ONE;100,ZERO;011,ONE;101,ZERO;010,ZERO;100,ZERO;010,ZERO;010,ZERO;000,ONE;010,ZERO;01,ERROR", 
        tokenStream("11110101001011110000101000101010101111000111100000100100111011000100110011111101001110101001010100101100110101110000010011000010000000111111110111110111010010100001010011101000000000011101110011110000101111010101000010001110101010001001000001001"));
	}

	@Test
	public void testString5() {
		assertEquals
        tokenStream("10000011011001101100010010011110100001110011000110000011100000111010001100010100000100101100100001111011111010101111011010111101010110111101011111101111001011110100110011011101100000001100101"));
	}

	@Test
	public void testString6() {
		assertEquals("100,ZERO;101,ZERO;000,ONE;100,ZERO;000,ONE;001,ZERO;001,ZERO;110,ZERO;011,ONE;110,ZERO;110,ZERO;110,ZERO;100,ZERO;000,ONE;111,ONE;100,ZERO;111,ONE;001,ZERO;011,ONE;000,ONE;010,ZERO;000,ONE;111,ONE;111,ONE;011,ONE;001,ZERO;101,ZERO;011,ONE;010,ZERO;110,ZERO;011,ONE;010,ZERO;001,ZERO;111,ONE;111,ONE;101,ZERO;100,ZERO;101,ZERO;110,ZERO;011,ONE;101,ZERO;100,ZERO;000,ONE;011,ONE;111,ONE;010,ZERO;001,ZERO;010,ZERO;001,ZERO;100,ZERO;111,ONE;001,ZERO;101,ZERO;011,ONE;111,ONE;001,ZERO;111,ONE;110,ZERO;0,ERROR", 
        tokenStream("1001010001000000010011100111101101101000001111001110010110000100001111110110011010110101100110100011111111011001011100111011000000111110100010100011001110011010111110011111100"));
	}

	@Test
	public void testString7() {
		assertEquals("101,ZERO;100,ZERO;101,ZERO;000,ONE;100,ZERO;010,ZERO;001,ZERO;001,ZERO;010,ZERO;100,ZERO;100,ZERO;010,ZERO;111,ONE;000,ONE;011,ONE;011,ONE;100,ZERO;111,ONE;000,ONE;111,ONE;001,ZERO;110,ZERO;101,ZERO;101,ZERO;000,ONE;100,ZERO;101,ZERO;101,ZERO;110,ZERO;101,ZERO;010,ZERO;010,ZERO;001,ZERO;001,ZERO;010,ZERO;001,ZERO;010,ZERO;110,ZERO;100,ZERO;100,ZERO", 
        tokenStream("101100101000100010001001010100100010111000011011100111000111001110101101000100101101110101010010001001010001010110100100"));
	}

	@Test
	public void testString8() {
		assertEquals
        tokenStream("000010001101101110010001101011111101100011001000001100011011110101000111111001000110100111100100100000111010110000111000011001100001010101101111111101111110000110110110010101000101101000100110111100101000010100000011110001110"));
	}

	@Test
	public void testString9() {
		assertEquals("111,ONE;111,ONE;000,ONE;001,ZERO;101,ZERO;011,ONE;010,ZERO;110,ZERO;110,ZERO;100,ZERO;011,ONE;100,ZERO;111,ONE;001,ZERO;000,ONE;100,ZERO;100,ZERO;011,ONE;100,ZERO;010,ZERO;101,ZERO;011,ONE;010,ZERO;100,ZERO;010,ZERO;100,ZERO;110,ZERO;000,ONE;101,ZERO;100,ZERO;011,ONE;101,ZERO;011,ONE;000,ONE;010,ZERO;110,ZERO;001,ZERO;001,ZERO;000,ONE;000,ONE;110,ZERO;001,ZERO;011,ONE;100,ZERO;000,ONE;001,ZERO;101,ZERO;001,ZERO;100,ZERO;010,ZERO;111,ONE;010,ZERO;110,ZERO;001,ZERO;000,ONE;011,ONE;011,ONE;110,ZERO;111,ONE;111,ONE;111,ONE;000,ONE;000,ONE;111,ONE;010,ZERO;000,ONE;011,ONE;110,ZERO;011,ONE;010,ZERO;000,ONE;110,ZERO;000,ONE;011,ONE;010,ZERO;010,ZERO;110,ZERO;101,ZERO;011,ONE;000,ONE;110,ZERO;011,ONE;000,ONE;101,ZERO;111,ONE;011,ONE;101,ZERO;011,ONE;100,ZERO;100,ZERO;001,ZERO;010,ZERO;100,ZERO;011,ONE;111,ONE;000,ONE;101,ZERO;011,ONE;111,ONE", 
        tokenStream("111111000001101011010110110100011100111001000100100011100010101011010100010100110000101100011101011000010110001001000000110001011100000001101001100010111010110001000011011110111111111000000111010000011110011010000110000011010010110101011000110011000101111011101011100100001010100011111000101011111"));
	}

	@Test
	public void testString10() {
		assertEquals("101,ZERO;101,ZERO;100,ZERO;001,ZERO;001,ZERO;101,ZERO;111,ONE;111,ONE;000,ONE;001,ZERO;011,ONE;101,ZERO;101,ZERO;111,ONE;000,ONE;010,ZERO;101,ZERO;110,ZERO;000,ONE;000,ONE;000,ONE;000,ONE;010,ZERO;101,ZERO;001,ZERO;011,ONE;101,ZERO;110,ZERO;000,ONE;001,ZERO;001,ZERO;110,ZERO;110,ZERO;000,ONE;010,ZERO;011,ONE;111,ONE;111,ONE;101,ZERO;110,ZERO;001,ZERO;111,ONE;111,ONE;000,ONE;100,ZERO;011,ONE;100,ZERO;000,ONE;010,ZERO;010,ZERO;000,ONE;111,ONE;111,ONE;010,ZERO;101,ZERO;111,ONE;001,ZERO;110,ZERO;110,ZERO;001,ZERO;011,ONE;110,ZERO;101,ZERO;001,ZERO;010,ZERO;001,ZERO;100,ZERO;101,ZERO;110,ZERO;110,ZERO;010,ZERO;100,ZERO;011,ONE;001,ZERO;101,ZERO;100,ZERO;110,ZERO;110,ZERO;101,ZERO;111,ONE;011,ONE;111,ONE;000,ONE;110,ZERO;110,ZERO;111,ONE;110,ZERO;000,ONE;000,ONE;111,ONE;011,ONE;111,ONE;011,ONE;000,ONE;111,ONE;111,ONE;101,ZERO;101,ZERO;010,ZERO;111,ONE;111,ONE;101,ZERO;100,ZERO;111,ONE;000,ONE;000,ONE;011,ONE;010,ZERO;100,ZERO;000,ONE;110,ZERO;000,ONE", 
        tokenStream("101101100001001101111111000001011101101111000010101110000000000000010101001011101110000001001110110000010011111111101110001111111000100011100000010010000111111010101111001110110001011110101001010001100101110110010100011001101100110110101111011111000110110111110000000111011111011000111111101101010111111101100111000000011010100000110000"));
	}

}