package csen1002.tests.task7;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.StringJoiner;
import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.Vocabulary;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task7.Task7Lexer;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task7TestsBatch1{
	
	/**
	 * Returns a string of tokenized lexemes.
	 *
	 * @param input is the string to be tokenized.
	 * @return Returns a formatted string representation of the list of tokens. The
	 *         string representation follows the one in the task description
	 */
	public static String tokenStream(String input) {
		// In case Task7Lexer is not defined correctly:
		// 1- If you modified the grammar in the g4 file, regenerate the ANTLR
		// recognizer to make sure that the latest grammar is generated
		// 2- Make sure that the location and the package are configured properly
		Task7Lexer lexer = new Task7Lexer(CharStreams.fromString(input));
		Vocabulary vocabulary = lexer.getVocabulary();
		List<? extends Token> tokens = lexer.getAllTokens();
		StringJoiner stringJoiner = new StringJoiner(";");
		for (Token token : tokens) {
			stringJoiner.add(token.getText() + "," + vocabulary.getSymbolicName(token.getType()));
		}
		return stringJoiner.toString();
	}


	@Test
	public void testString1() {
		assertEquals("011,ONE;001,ZERO;011,ONE;000,ONE;010,ZERO;010,ZERO;101,ZERO;000,ONE;010,ZERO;110,ZERO;111,ONE;110,ZERO;000,ONE;111,ONE;010,ZERO;001,ZERO;100,ZERO;111,ONE;001,ZERO;111,ONE;110,ZERO;111,ONE;011,ONE;001,ZERO;111,ONE;011,ONE;111,ONE;001,ZERO;000,ONE;100,ZERO;001,ZERO;110,ZERO;101,ZERO;000,ONE;100,ZERO;000,ONE;001,ZERO;100,ZERO;100,ZERO;010,ZERO;011,ONE;100,ZERO;010,ZERO;010,ZERO;000,ONE;010,ZERO;100,ZERO;001,ZERO;001,ZERO;100,ZERO;011,ONE;101,ZERO;010,ZERO;001,ZERO;110,ZERO;001,ZERO;111,ONE;100,ZERO;010,ZERO;111,ONE;100,ZERO;010,ZERO;111,ONE;101,ZERO;110,ZERO;011,ONE;000,ONE;001,ZERO;011,ONE;101,ZERO;011,ONE;110,ZERO;111,ONE;110,ZERO;111,ONE;100,ZERO;111,ONE;111,ONE;111,ONE;111,ONE;111,ONE;010,ZERO;111,ONE;110,ZERO;1,ERROR", 
        tokenStream("0110010110000100101010000101101111100001110100011001110011111101110110011110111110010001000011101010001000000011001000100111000100100000101000010011000111010100011100011111000101111000101111011100110000010111010111101111101111001111111111111110101111101"));
	}

	@Test
	public void testString2() {
		assertEquals
        tokenStream("101100010011110011001100010011001011011100001111110110110001110110100001111000110011010011000111001000001011111110101000111111001001010000101100000100101010110011010100010001000111010111010001101001110100111101101100000"));
	}

	@Test
	public void testString3() {
		assertEquals("001,ZERO;101,ZERO;100,ZERO;100,ZERO;101,ZERO;101,ZERO;110,ZERO;000,ONE;011,ONE;110,ZERO;111,ONE;010,ZERO;100,ZERO;010,ZERO;100,ZERO;101,ZERO;011,ONE;011,ONE;111,ONE;000,ONE;101,ZERO;101,ZERO;010,ZERO;011,ONE;010,ZERO;001,ZERO", 
        tokenStream("001101100100101101110000011110111010100010100101011011111000101101010011010001"));
	}

	@Test
	public void testString4() {
		assertEquals("110,ZERO;110,ZERO;101,ZERO;101,ZERO;100,ZERO;111,ONE;011,ONE;011,ONE;001,ZERO;011,ONE;111,ONE;111,ONE;111,ONE;011,ONE;100,ZERO;000,ONE;000,ONE;011,ONE;011,ONE;101,ZERO;000,ONE;011,ONE;100,ZERO;101,ZERO;010,ZERO;110,ZERO;110,ZERO;000,ONE;000,ONE;001,ZERO;101,ZERO;111,ONE;111,ONE;001,ZERO;011,ONE;110,ZERO;110,ZERO;001,ZERO;001,ZERO;010,ZERO;110,ZERO;001,ZERO;111,ONE;000,ONE;000,ONE;000,ONE;100,ZERO;111,ONE;110,ZERO;101,ZERO;000,ONE;100,ZERO;101,ZERO", 
        tokenStream("110110101101100111011011001011111111111011100000000011011101000011100101010110110000000001101111111001011110110001001010110001111000000000100111110101000100101"));
	}

	@Test
	public void testString5() {
		assertEquals("000,ONE;001,ZERO;000,ONE;110,ZERO;011,ONE;101,ZERO;110,ZERO;110,ZERO;101,ZERO;101,ZERO;000,ONE;010,ZERO;000,ONE;111,ONE;110,ZERO;010,ZERO;110,ZERO;111,ONE;000,ONE;111,ONE;1,ERROR", 
        tokenStream("0000010001100111011101101011010000100001111100101101110001111"));
	}

	@Test
	public void testString6() {
		assertEquals("100,ZERO;001,ZERO;101,ZERO;010,ZERO;001,ZERO;110,ZERO;101,ZERO;000,ONE;110,ZERO;000,ONE;001,ZERO;000,ONE;001,ZERO;100,ZERO;001,ZERO;001,ZERO;111,ONE;000,ONE;011,ONE;100,ZERO;100,ZERO;101,ZERO;111,ONE;001,ZERO;110,ZERO;010,ZERO;100,ZERO;100,ZERO;100,ZERO;110,ZERO;001,ZERO;010,ZERO;111,ONE;110,ZERO;111,ONE;101,ZERO;101,ZERO;111,ONE;011,ONE;000,ONE;100,ZERO;111,ONE;101,ZERO;101,ZERO;100,ZERO;111,ONE;001,ZERO;100,ZERO;111,ONE;111,ONE;010,ZERO;010,ZERO;010,ZERO;111,ONE;110,ZERO;100,ZERO;001,ZERO;010,ZERO;011,ONE;000,ONE;010,ZERO;011,ONE;010,ZERO;011,ONE;011,ONE;001,ZERO;100,ZERO;001,ZERO;000,ONE;100,ZERO;111,ONE;000,ONE;010,ZERO;011,ONE;110,ZERO;001,ZERO;001,ZERO;110,ZERO", 
        tokenStream("100001101010001110101000110000001000001100001001111000011100100101111001110010100100100110001010111110111101101111011000100111101101100111001100111111010010010111110100001010011000010011010011011001100001000100111000010011110001001110"));
	}

	@Test
	public void testString7() {
		assertEquals("110,ZERO;011,ONE;000,ONE;010,ZERO;001,ZERO;111,ONE;110,ZERO;111,ONE;100,ZERO;001,ZERO;101,ZERO;010,ZERO;101,ZERO;110,ZERO;100,ZERO;010,ZERO;101,ZERO;101,ZERO;011,ONE;001,ZERO;001,ZERO;100,ZERO;000,ONE;100,ZERO;000,ONE;001,ZERO;100,ZERO;011,ONE;010,ZERO;000,ONE;001,ZERO;001,ZERO;101,ZERO;111,ONE;110,ZERO;100,ZERO;111,ONE;110,ZERO;001,ZERO;101,ZERO;101,ZERO;111,ONE;010,ZERO;011,ONE;000,ONE;001,ZERO;111,ONE;001,ZERO;000,ONE;111,ONE;010,ZERO;100,ZERO;110,ZERO;011,ONE;011,ONE;101,ZERO;100,ZERO;110,ZERO;011,ONE;011,ONE;000,ONE;101,ZERO;111,ONE;111,ONE;000,ONE;111,ONE;001,ZERO;110,ZERO;000,ONE;100,ZERO;011,ONE;110,ZERO;111,ONE;111,ONE;010,ZERO;111,ONE;100,ZERO;000,ONE;010,ZERO;100,ZERO;110,ZERO;000,ONE;100,ZERO;111,ONE;101,ZERO;111,ONE;010,ZERO;000,ONE;010,ZERO;111,ONE;100,ZERO;010,ZERO;000,ONE;100,ZERO;110,ZERO;100,ZERO;010,ZERO;101,ZERO;010,ZERO;000,ONE;100,ZERO;111,ONE;010,ZERO;010,ZERO;110,ZERO;001,ZERO;001,ZERO;101,ZERO;111,ONE;100,ZERO;000,ONE;110,ZERO;001,ZERO", 
        tokenStream("110011000010001111110111100001101010101110100010101101011001001100000100000001100011010000001001101111110100111110001101101111010011000001111001000111010100110011011101100110011011000101111111000111001110000100011110111111010111100000010100110000100111101111010000010111100010000100110100010101010000100111010010110001001101111100000110001"));
	}

	@Test
	public void testString8() {
		assertEquals("011,ONE;010,ZERO;110,ZERO;001,ZERO;110,ZERO;110,ZERO;110,ZERO;011,ONE;010,ZERO;000,ONE;001,ZERO;010,ZERO;000,ONE;110,ZERO;111,ONE;100,ZERO;010,ZERO;011,ONE;001,ZERO;011,ONE;100,ZERO;011,ONE;110,ZERO;011,ONE;101,ZERO;101,ZERO;001,ZERO;100,ZERO;011,ONE;011,ONE;111,ONE;111,ONE;100,ZERO;111,ONE;111,ONE;111,ONE;101,ZERO;000,ONE;000,ONE;110,ZERO;100,ZERO;101,ZERO;111,ONE;101,ZERO;111,ONE;111,ONE;100,ZERO;000,ONE;110,ZERO;011,ONE;011,ONE;010,ZERO;111,ONE;111,ONE;010,ZERO;110,ZERO;010,ZERO;100,ZERO;10,ERROR", 
        tokenStream("01101011000111011011001101000000101000011011110001001100101110001111001110110100110001101111111110011111111110100000011010010111110111111110000011001101101011111101011001010010"));
	}

	@Test
	public void testString9() {
		assertEquals("110,ZERO;111,ONE;100,ZERO;111,ONE;00,ERROR", 
        tokenStream("11011110011100"));
	}

	@Test
	public void testString10() {
		assertEquals("110,ZERO;110,ZERO;110,ZERO;110,ZERO;000,ONE;011,ONE;110,ZERO;110,ZERO;010,ZERO;101,ZERO;110,ZERO;011,ONE;100,ZERO;100,ZERO;011,ONE;110,ZERO;000,ONE;000,ONE;110,ZERO;111,ONE;000,ONE;111,ONE;011,ONE;100,ZERO;101,ZERO;111,ONE;110,ZERO;010,ZERO;000,ONE;101,ZERO;101,ZERO;000,ONE;001,ZERO;101,ZERO;011,ONE;000,ONE;011,ONE;001,ZERO;001,ZERO;101,ZERO;001,ZERO;100,ZERO;011,ONE;111,ONE;101,ZERO;111,ONE;001,ZERO;010,ZERO;111,ONE;001,ZERO;010,ZERO;110,ZERO;010,ZERO;101,ZERO;000,ONE;110,ZERO;010,ZERO;110,ZERO;001,ZERO;110,ZERO;100,ZERO;001,ZERO;001,ZERO;101,ZERO;101,ZERO;000,ONE;001,ZERO;010,ZERO;100,ZERO;101,ZERO;110,ZERO;001,ZERO;1,ERROR", 
        tokenStream("1101101101100000111101100101011100111001000111100000001101110001110111001011111100100001011010000011010110000110010011010011000111111011110010101110010101100101010001100101100011101000010011011010000010101001011100011"));
	}

}