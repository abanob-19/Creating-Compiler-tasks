package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch2 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#t;v;z#0,t,0;0,t,1;0,t,2;0,t,5;0,t,7;0,v,0;0,v,1;0,v,4;0,v,5;0,v,6;0,v,7;0,z,0;0,z,2;0,z,3;0,z,4;0,z,5;0,z,7;1,t,1;1,t,5;1,t,6;1,t,7;1,v,0;1,v,2;1,v,4;1,v,5;1,v,6;1,z,0;1,z,1;1,z,3;1,z,4;1,z,5;1,z,6;1,z,7;2,t,0;2,t,2;2,t,5;2,t,6;2,t,7;2,v,1;2,v,4;2,v,5;2,v,6;2,z,0;2,z,4;2,z,5;2,z,6;2,z,7;3,e,5;3,e,6;3,t,0;3,t,1;3,t,2;3,t,4;3,t,5;3,t,6;3,v,0;3,v,2;3,v,3;3,v,7;3,z,0;3,z,1;3,z,2;3,z,4;3,z,5;3,z,7;4,e,4;4,t,0;4,t,2;4,t,5;4,t,6;4,t,7;4,v,0;4,v,4;4,v,6;4,v,7;4,z,0;4,z,2;4,z,3;4,z,5;4,z,6;4,z,7;5,e,1;5,t,1;5,t,3;5,t,4;5,t,6;5,v,0;5,v,4;5,v,6;5,v,7;5,z,0;5,z,2;5,z,3;5,z,4;5,z,5;6,t,0;6,t,1;6,t,2;6,t,3;6,t,4;6,t,5;6,t,6;6,v,0;6,v,1;6,v,2;6,v,5;6,z,0;6,z,1;6,z,2;6,z,4;6,z,5;6,z,7;7,e,3;7,e,4;7,t,1;7,t,2;7,t,5;7,t,6;7,t,7;7,v,0;7,v,3;7,v,5;7,v,6;7,v,7;7,z,0;7,z,1;7,z,3;7,z,4;7,z,5;7,z,6;7,z,7#1#0;3;5;7");
		assertEquals("0/1/2/3/4/5/6/7;0/1/2/4/5/6;0/1/3/4/5/6/7;1;1/3/4/5/6/7#t;v;z#0/1/2/3/4/5/6/7,t,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,v,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,z,0/1/2/3/4/5/6/7;0/1/2/4/5/6,t,0/1/2/3/4/5/6/7;0/1/2/4/5/6,v,0/1/2/3/4/5/6/7;0/1/2/4/5/6,z,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,t,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,v,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,z,0/1/2/3/4/5/6/7;1,t,1/3/4/5/6/7;1,v,0/1/2/4/5/6;1,z,0/1/3/4/5/6/7;1/3/4/5/6/7,t,0/1/2/3/4/5/6/7;1/3/4/5/6/7,v,0/1/2/3/4/5/6/7;1/3/4/5/6/7,z,0/1/2/3/4/5/6/7#1#0/1/2/3/4/5/6/7;0/1/2/4/5/6;0/1/3/4/5/6/7;1/3/4/5/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#a;l#0,a,1;0,a,3;0,a,4;0,a,5;0,a,7;0,a,10;0,l,0;0,l,3;0,l,4;0,l,5;0,l,8;0,l,10;1,a,0;1,a,1;1,a,2;1,a,4;1,a,6;1,a,7;1,a,9;1,l,1;1,l,2;1,l,4;1,l,7;2,a,0;2,a,1;2,a,7;2,a,8;2,a,9;2,a,10;2,l,1;2,l,3;2,l,5;2,l,7;2,l,9;2,l,10;3,a,1;3,a,2;3,a,3;3,a,6;3,a,7;3,a,9;3,a,10;3,l,0;3,l,1;3,l,2;3,l,5;3,l,6;3,l,9;4,a,4;4,a,5;4,a,6;4,a,10;4,l,5;4,l,6;4,l,8;4,l,9;5,a,1;5,a,3;5,a,5;5,a,6;5,a,10;5,l,0;5,l,1;5,l,2;5,l,3;5,l,9;5,l,10;6,a,2;6,a,5;6,a,6;6,a,7;6,a,10;6,l,0;6,l,2;6,l,3;6,l,9;7,a,0;7,a,1;7,a,3;7,a,5;7,a,8;7,a,9;7,a,10;7,l,0;7,l,1;7,l,3;7,l,6;7,l,10;8,a,1;8,a,2;8,a,4;8,a,5;8,a,7;8,a,9;8,l,0;8,l,1;8,l,2;8,l,3;8,l,9;9,a,1;9,a,4;9,a,5;9,a,6;9,a,7;9,a,8;9,a,9;9,l,3;9,l,5;9,l,7;9,l,10;10,a,0;10,a,2;10,a,4;10,a,8;10,l,1;10,l,4;10,l,6;10,l,7#1#2;3;5;10");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/6/7/9;1;1/2/4/7#a;l#0/1/2/3/4/5/6/7/8/9/10,a,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,l,0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/6/7/9,a,0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/6/7/9,l,0/1/2/3/4/5/6/7/8/9/10;1,a,0/1/2/4/6/7/9;1,l,1/2/4/7;1/2/4/7,a,0/1/2/3/4/5/6/7/8/9/10;1/2/4/7,l,0/1/2/3/4/5/6/7/8/9/10#1#0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/6/7/9;1/2/4/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#k;u;v;z#0,z,1;1,e,5;2,v,3;3,e,5;4,e,0;4,e,2;5,e,10;6,u,7;7,k,8;8,e,10;9,e,4;9,e,6#9#10");
		assertEquals("-1;0/2/4/6/9;1/5/10;3/5/10;7;8/10#k;u;v;z#-1,k,-1;-1,u,-1;-1,v,-1;-1,z,-1;0/2/4/6/9,k,-1;0/2/4/6/9,u,7;0/2/4/6/9,v,3/5/10;0/2/4/6/9,z,1/5/10;1/5/10,k,-1;1/5/10,u,-1;1/5/10,v,-1;1/5/10,z,-1;3/5/10,k,-1;3/5/10,u,-1;3/5/10,v,-1;3/5/10,z,-1;7,k,8/10;7,u,-1;7,v,-1;7,z,-1;8/10,k,-1;8/10,u,-1;8/10,v,-1;8/10,z,-1#0/2/4/6/9#1/5/10;3/5/10;8/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#h;i;k;l#0,h,0;0,h,1;0,h,2;0,h,5;0,h,6;0,h,7;0,i,1;0,i,3;0,i,4;0,i,5;0,i,6;0,i,7;0,k,1;0,k,2;0,k,3;0,k,4;0,k,5;0,l,0;0,l,2;0,l,3;0,l,4;0,l,5;0,l,6;1,e,5;1,e,6;1,h,0;1,h,3;1,h,6;1,h,7;1,i,0;1,i,1;1,i,5;1,i,7;1,k,1;1,k,2;1,k,3;1,k,4;1,k,5;1,k,6;1,k,7;1,l,0;1,l,1;1,l,2;1,l,4;1,l,5;1,l,6;2,e,6;2,h,0;2,h,1;2,h,2;2,h,3;2,h,4;2,h,5;2,h,7;2,i,0;2,i,1;2,i,2;2,i,3;2,i,4;2,i,5;2,i,7;2,k,0;2,k,1;2,k,2;2,k,3;2,k,4;2,k,5;2,l,0;2,l,1;2,l,3;2,l,4;2,l,5;2,l,6;2,l,7;3,e,2;3,e,5;3,e,7;3,h,0;3,h,1;3,h,3;3,h,6;3,i,0;3,i,1;3,i,2;3,i,4;3,i,5;3,i,6;3,k,0;3,k,1;3,k,3;3,k,4;3,k,5;3,k,7;3,l,0;3,l,1;3,l,2;3,l,6;3,l,7;4,e,3;4,e,5;4,h,0;4,h,1;4,h,2;4,h,3;4,h,4;4,h,5;4,h,6;4,i,0;4,i,1;4,i,2;4,i,3;4,i,4;4,i,5;4,i,6;4,k,1;4,k,2;4,k,3;4,k,6;4,l,0;4,l,2;4,l,3;4,l,4;4,l,5;4,l,6;4,l,7;5,e,5;5,h,1;5,h,2;5,h,3;5,h,4;5,h,5;5,h,6;5,i,0;5,i,1;5,i,2;5,i,4;5,i,5;5,i,6;5,i,7;5,k,0;5,k,1;5,k,2;5,k,3;5,k,5;5,k,6;5,k,7;5,l,0;5,l,1;5,l,3;5,l,7;6,e,1;6,h,1;6,h,3;6,h,5;6,h,6;6,h,7;6,i,0;6,i,3;6,i,4;6,i,5;6,i,7;6,k,0;6,k,1;6,k,2;6,k,4;6,l,3;6,l,4;6,l,5;6,l,6;7,h,0;7,h,1;7,h,2;7,h,3;7,h,4;7,h,5;7,h,6;7,i,0;7,i,1;7,i,3;7,i,6;7,i,7;7,k,1;7,k,2;7,k,4;7,k,5;7,k,6;7,k,7;7,l,1;7,l,3;7,l,4;7,l,5;7,l,6;7,l,7#0#4;7");
		assertEquals("0;0/1/2/3/4/5/6/7;0/1/2/5/6/7;1/2/3/4/5/6/7#h;i;k;l#0,h,0/1/2/5/6/7;0,i,1/2/3/4/5/6/7;0,k,1/2/3/4/5/6/7;0,l,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,h,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,i,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,k,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,l,0/1/2/3/4/5/6/7;0/1/2/5/6/7,h,0/1/2/3/4/5/6/7;0/1/2/5/6/7,i,0/1/2/3/4/5/6/7;0/1/2/5/6/7,k,0/1/2/3/4/5/6/7;0/1/2/5/6/7,l,0/1/2/3/4/5/6/7;1/2/3/4/5/6/7,h,0/1/2/3/4/5/6/7;1/2/3/4/5/6/7,i,0/1/2/3/4/5/6/7;1/2/3/4/5/6/7,k,0/1/2/3/4/5/6/7;1/2/3/4/5/6/7,l,0/1/2/3/4/5/6/7#0#0/1/2/3/4/5/6/7;0/1/2/5/6/7;1/2/3/4/5/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#d;i;r#0,i,1;1,e,0;1,e,3;2,e,0;2,e,3;3,e,7;4,r,5;5,e,7;6,e,2;6,e,4;7,e,11;8,d,9;9,e,11;10,e,6;10,e,8#10#11");
		assertEquals("-1;0/1/3/7/11;0/2/3/4/6/7/8/10/11;5/7/11;9/11#d;i;r#-1,d,-1;-1,i,-1;-1,r,-1;0/1/3/7/11,d,-1;0/1/3/7/11,i,0/1/3/7/11;0/1/3/7/11,r,-1;0/2/3/4/6/7/8/10/11,d,9/11;0/2/3/4/6/7/8/10/11,i,0/1/3/7/11;0/2/3/4/6/7/8/10/11,r,5/7/11;5/7/11,d,-1;5/7/11,i,-1;5/7/11,r,-1;9/11,d,-1;9/11,i,-1;9/11,r,-1#0/2/3/4/6/7/8/10/11#0/1/3/7/11;0/2/3/4/6/7/8/10/11;5/7/11;9/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#h;r#0,e,0;0,h,2;0,h,4;0,h,5;0,h,8;0,r,0;0,r,2;0,r,3;0,r,6;1,e,1;1,h,1;1,h,3;1,h,5;1,h,6;1,h,8;1,r,1;1,r,4;1,r,6;1,r,8;2,e,2;2,h,0;2,h,1;2,h,5;2,h,7;2,h,8;2,r,0;2,r,2;2,r,3;2,r,5;2,r,7;3,e,3;3,h,1;3,h,4;3,h,5;3,h,7;3,h,8;3,r,0;3,r,1;3,r,2;3,r,6;4,e,4;4,h,1;4,h,2;4,h,3;4,h,5;4,h,6;4,h,7;4,r,0;4,r,1;4,r,5;4,r,6;4,r,8;5,h,0;5,h,1;5,h,3;5,h,5;5,h,8;5,r,0;5,r,3;5,r,4;5,r,5;5,r,6;5,r,8;6,h,0;6,h,2;6,h,3;6,h,4;6,h,6;6,h,7;6,h,8;6,r,0;6,r,4;6,r,6;6,r,7;7,h,0;7,h,2;7,h,4;7,h,5;7,h,6;7,h,7;7,r,1;7,r,2;7,r,3;7,r,4;7,r,6;7,r,7;8,e,8;8,h,2;8,h,3;8,h,5;8,h,8;8,r,0;8,r,1;8,r,2;8,r,5;8,r,6;8,r,7;8,r,8#1#1;2;4;5;8");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/4/5/6/7/8;1;1/3/5/6/8;1/4/6/8#h;r#0/1/2/3/4/5/6/7/8,h,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,r,0/1/2/3/4/5/6/7/8;0/1/2/4/5/6/7/8,h,0/1/2/3/4/5/6/7/8;0/1/2/4/5/6/7/8,r,0/1/2/3/4/5/6/7/8;1,h,1/3/5/6/8;1,r,1/4/6/8;1/3/5/6/8,h,0/1/2/3/4/5/6/7/8;1/3/5/6/8,r,0/1/2/3/4/5/6/7/8;1/4/6/8,h,0/1/2/3/4/5/6/7/8;1/4/6/8,r,0/1/2/4/5/6/7/8#1#0/1/2/3/4/5/6/7/8;0/1/2/4/5/6/7/8;1;1/3/5/6/8;1/4/6/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#g;h;l;t;w#0,g,1;1,e,6;1,e,8;2,w,3;3,e,7;4,t,5;5,e,7;6,e,2;6,e,4;7,e,10;8,l,9;9,e,10;10,h,11#0#11");
		assertEquals("-1;0;1/2/4/6/8;3/7/10;5/7/10;9/10;11#g;h;l;t;w#-1,g,-1;-1,h,-1;-1,l,-1;-1,t,-1;-1,w,-1;0,g,1/2/4/6/8;0,h,-1;0,l,-1;0,t,-1;0,w,-1;1/2/4/6/8,g,-1;1/2/4/6/8,h,-1;1/2/4/6/8,l,9/10;1/2/4/6/8,t,5/7/10;1/2/4/6/8,w,3/7/10;3/7/10,g,-1;3/7/10,h,11;3/7/10,l,-1;3/7/10,t,-1;3/7/10,w,-1;5/7/10,g,-1;5/7/10,h,11;5/7/10,l,-1;5/7/10,t,-1;5/7/10,w,-1;9/10,g,-1;9/10,h,11;9/10,l,-1;9/10,t,-1;9/10,w,-1;11,g,-1;11,h,-1;11,l,-1;11,t,-1;11,w,-1#0#11", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#g;q;z#0,g,0;0,g,1;0,g,2;0,g,4;0,q,2;0,q,3;0,q,4;0,q,7;0,z,0;0,z,4;0,z,5;0,z,7;1,g,0;1,g,2;1,g,4;1,g,5;1,g,6;1,q,0;1,q,2;1,q,3;1,q,4;1,q,5;1,q,7;1,z,2;1,z,3;1,z,5;1,z,6;2,g,0;2,g,1;2,g,2;2,g,3;2,g,4;2,g,6;2,q,0;2,q,1;2,q,2;2,q,3;2,q,5;2,q,6;2,q,7;2,z,0;2,z,1;2,z,2;2,z,4;2,z,5;2,z,6;2,z,7;3,g,1;3,g,4;3,g,5;3,g,6;3,g,7;3,q,0;3,q,1;3,q,5;3,q,6;3,z,0;3,z,1;3,z,2;3,z,3;3,z,5;4,g,0;4,g,2;4,g,4;4,g,6;4,g,7;4,q,0;4,q,1;4,q,3;4,q,4;4,q,5;4,q,6;4,q,7;4,z,0;4,z,2;4,z,4;4,z,5;4,z,6;4,z,7;5,g,0;5,g,1;5,g,2;5,g,3;5,g,5;5,g,6;5,q,0;5,q,4;5,q,5;5,q,6;5,q,7;5,z,0;5,z,1;5,z,2;5,z,4;6,g,1;6,g,3;6,g,4;6,g,5;6,g,7;6,q,0;6,q,1;6,q,2;6,q,3;6,q,4;6,q,6;6,q,7;6,z,1;6,z,2;6,z,6;6,z,7;7,g,0;7,g,1;7,g,2;7,g,3;7,g,4;7,g,7;7,q,0;7,q,1;7,q,2;7,q,3;7,q,4;7,q,6;7,q,7;7,z,0;7,z,3;7,z,4;7,z,5;7,z,6#4#0;2;3");
		assertEquals("0/1/2/3/4/5/6/7;0/1/3/4/5/6/7;0/2/4/5/6/7;0/2/4/6/7;4#g;q;z#0/1/2/3/4/5/6/7,g,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,q,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,z,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,g,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,q,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,z,0/1/2/3/4/5/6/7;0/2/4/5/6/7,g,0/1/2/3/4/5/6/7;0/2/4/5/6/7,q,0/1/2/3/4/5/6/7;0/2/4/5/6/7,z,0/1/2/3/4/5/6/7;0/2/4/6/7,g,0/1/2/3/4/5/6/7;0/2/4/6/7,q,0/1/2/3/4/5/6/7;0/2/4/6/7,z,0/1/2/3/4/5/6/7;4,g,0/2/4/6/7;4,q,0/1/3/4/5/6/7;4,z,0/2/4/5/6/7#4#0/1/2/3/4/5/6/7;0/1/3/4/5/6/7;0/2/4/5/6/7;0/2/4/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#k;s#0,k,0;0,k,2;0,k,3;0,k,5;0,k,7;0,k,8;0,s,0;0,s,3;0,s,5;0,s,6;0,s,8;0,s,11;1,k,3;1,k,4;1,k,6;1,k,8;1,s,3;1,s,4;1,s,7;1,s,8;2,k,2;2,k,5;2,k,7;2,k,9;2,k,11;2,s,7;2,s,8;2,s,9;2,s,11;3,k,0;3,k,3;3,k,4;3,k,5;3,k,7;3,k,10;3,k,11;3,s,0;3,s,3;3,s,6;3,s,10;3,s,11;4,k,1;4,k,5;4,k,6;4,k,7;4,k,8;4,k,11;4,s,0;4,s,4;4,s,5;4,s,7;4,s,8;4,s,9;5,k,0;5,k,1;5,k,8;5,k,10;5,s,0;5,s,1;5,s,2;5,s,5;5,s,7;5,s,8;5,s,9;6,k,1;6,k,2;6,k,5;6,k,6;6,k,9;6,k,11;6,s,0;6,s,6;6,s,10;6,s,11;7,k,0;7,k,1;7,k,2;7,k,3;7,k,7;7,k,10;7,s,2;7,s,3;7,s,5;7,s,7;7,s,10;8,k,0;8,k,1;8,k,2;8,k,3;8,k,4;8,k,9;8,k,11;8,s,3;8,s,4;8,s,5;8,s,6;9,k,0;9,k,1;9,k,5;9,k,7;9,k,9;9,k,11;9,s,1;9,s,2;9,s,3;9,s,4;9,s,7;9,s,8;9,s,11;10,k,0;10,k,2;10,k,4;10,k,6;10,k,8;10,k,11;10,s,0;10,s,1;10,s,2;10,s,3;10,s,4;10,s,5;10,s,9;11,k,1;11,k,5;11,k,6;11,k,7;11,k,9;11,k,10;11,k,11;11,s,0;11,s,2;11,s,6;11,s,7;11,s,9#2#1;2");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/9/10/11;0/1/2/3/5/6/7/8/9/10/11;2;2/5/7/9/11;7/8/9/11#k;s#0/1/2/3/4/5/6/7/8/9/10/11,k,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,s,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/9/10/11,k,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/9/10/11,s,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/6/7/8/9/10/11,k,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/6/7/8/9/10/11,s,0/1/2/3/4/5/6/7/8/9/10/11;2,k,2/5/7/9/11;2,s,7/8/9/11;2/5/7/9/11,k,0/1/2/3/5/6/7/8/9/10/11;2/5/7/9/11,s,0/1/2/3/4/5/6/7/8/9/10/11;7/8/9/11,k,0/1/2/3/4/5/6/7/9/10/11;7/8/9/11,s,0/1/2/3/4/5/6/7/8/9/10/11#2#0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/9/10/11;0/1/2/3/5/6/7/8/9/10/11;2;2/5/7/9/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#p;r#0,p,3;0,p,4;0,p,5;0,p,6;0,p,7;0,r,0;0,r,3;0,r,7;0,r,8;1,e,5;1,e,6;1,p,0;1,p,1;1,p,6;1,p,7;1,r,1;1,r,6;1,r,7;1,r,8;2,e,0;2,p,1;2,p,2;2,p,4;2,p,6;2,p,7;2,r,0;2,r,1;2,r,2;2,r,6;2,r,7;2,r,8;3,e,1;3,p,0;3,p,5;3,p,6;3,p,8;3,r,0;3,r,1;3,r,2;3,r,3;3,r,5;4,e,3;4,e,4;4,e,6;4,p,0;4,p,3;4,p,4;4,p,6;4,p,7;4,p,8;4,r,3;4,r,4;4,r,7;4,r,8;5,p,0;5,p,2;5,p,5;5,p,7;5,p,8;5,r,1;5,r,2;5,r,5;5,r,6;5,r,7;6,e,4;6,p,2;6,p,3;6,p,5;6,p,6;6,p,8;6,r,0;6,r,1;6,r,4;6,r,5;6,r,6;6,r,7;7,e,2;7,p,0;7,p,1;7,p,4;7,p,5;7,p,6;7,r,2;7,r,4;7,r,5;7,r,6;8,p,1;8,p,5;8,p,6;8,p,7;8,p,8;8,r,3;8,r,4;8,r,5;8,r,6;8,r,8#0#3;5;8");
		assertEquals("0;0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7/8#p;r#0,p,0/1/2/3/4/5/6/7;0,r,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7,p,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7,r,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,p,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,r,0/1/2/3/4/5/6/7/8#0#0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7/8", nfaToDfa.toString());
	}

}